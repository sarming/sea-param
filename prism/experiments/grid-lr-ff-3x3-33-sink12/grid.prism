mdp
const int N=3;
const int M=3;

// const double b;
// count double e;
// const double l = b * e;
// const double r = (e-b)*e;
const double r;
const double l;
const double ne=r;
const double nw=l;
const double se=l;
const double sw=r;
const double en=l;
const double es=r;
const double wn=r;
const double ws=l;

formula sink = (x=1 & y=2) | (x=N & y=M);
label "goal" = x=N & y=M;

module ff_grid

             x : [1..N] init 1;
             y : [1..M] init 1;

             [n] x<N & y>1 & y<M & !sink -> 1-ne-nw : (x'=x+1) +  ne : (y'=y+1) + nw : (y'=y-1);
             [n] x<N & y=1       & !sink -> 1-ne    : (x'=x+1) +  ne : (y'=y+1);
             [n] x<N & y=M       & !sink -> 1-nw    : (x'=x+1) +                  nw : (y'=y-1);

             [s] x>1 & y>1 & y<M & !sink -> 1-se-sw : (x'=x-1) +  se : (y'=y+1) + sw : (y'=y-1);
             [s] x>1 & y=1       & !sink -> 1-se    : (x'=x-1) +  se : (y'=y+1);
             [s] x>1 & y=M       & !sink -> 1-sw    : (x'=x-1) +                  sw : (y'=y-1);

             [e] y<M & x>1 & x<N & !sink -> 1-en-es : (y'=y+1) +  en : (x'=x+1) + es : (x'=x-1);
             [e] y<M & x=1       & !sink -> 1-en    : (y'=y+1) +  en : (x'=x+1);
             [e] y<M & x=N       & !sink -> 1-es    : (y'=y+1) +                  es : (x'=x-1);

             [w] y>1 & x>1 & x<N & !sink -> 1-wn-ws : (y'=y-1) +  wn : (x'=x+1) + ws : (x'=x-1);
             [w] y>1 & x=1       & !sink -> 1-wn    : (y'=y-1) +  wn : (x'=x+1);
             [w] y>1 & x=N       & !sink -> 1-ws    : (y'=y-1) +                  ws : (x'=x-1);

             [x] sink -> true;
endmodule
